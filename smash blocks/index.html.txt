<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>smash blocks - Game</title>
    <style>
        body {
            text-align: center;
            background-color: black;
            color: white;
            font-family: Arial, sans-serif;
        }
        #game-board {
            display: grid;
            grid-template-columns: repeat(8, 50px);
            grid-gap: 5px;
            justify-content: center;
            margin: 20px auto;
        }
        .block {
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: bold;
            cursor: pointer;
            border-radius: 5px;
        }
        .red { background-color: red; }
        .blue { background-color: blue; }
        .green { background-color: green; }
        .yellow { background-color: yellow; }
        .purple { background-color: purple; }
        .orange { background-color: orange; }
        .pink { background-color: pink; }
        .win-message {
            font-size: 24px;
            color: lime;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>smash blocks 🎮</h1>
    <p>  Click on similar and adjacent blocks to destroy them.!</p>
    <div id="game-board"></div>
    <p id="score">النتيجة: 0</p>
    <p id="level">المستوى: 1</p>
    <div id="winMessage" class="win-message" style="display: none;">🎉 مبروك فزت! المرحلة التالية...</div>
    <button onclick="restartGame()">إعادة اللعب</button>

    <script>
        const rows = 8;
        const cols = 8;
        let score = 0;
        let level = 1;
        let maxColors = 3; // يبدأ بثلاثة ألوان ويزداد مع كل مستوى
        const allColors = ["red", "blue", "green", "yellow", "purple", "orange", "pink"];
        let board = [];

        const gameBoard = document.getElementById("game-board");
        const scoreDisplay = document.getElementById("score");
        const levelDisplay = document.getElementById("level");
        const winMessage = document.getElementById("winMessage");

        function createBoard() {
            gameBoard.innerHTML = "";
            board = [];
            for (let i = 0; i < rows; i++) {
                board[i] = [];
                for (let j = 0; j < cols; j++) {
                    const color = allColors[Math.floor(Math.random() * maxColors)];
                    board[i][j] = color;
                }
            }
            renderBoard();
        }

        function renderBoard() {
            gameBoard.innerHTML = "";
            for (let i = 0; i < rows; i++) {
                for (let j = 0; j < cols; j++) {
                    if (board[i][j]) createBlock(i, j, board[i][j]);
                }
            }
            scoreDisplay.innerText = `score: ${score}`;
            levelDisplay.innerText = `level: ${level}`;

            checkWinCondition(); // تحقق من الفوز بعد كل تحديث
        }

        function createBlock(row, col, color) {
            const block = document.createElement("div");
            block.classList.add("block", color);
            block.dataset.row = row;
            block.dataset.col = col;
            block.onclick = () => removeBlocks(row, col, color);
            gameBoard.appendChild(block);
        }

        function removeBlocks(row, col, color) {
            let toRemove = findConnectedBlocks(row, col, color, []);

            if (toRemove.length > 1) {
                toRemove.forEach(([r, c]) => {
                    board[r][c] = null;
                });

                score += toRemove.length * 10;
                dropBlocks();
            }
        }

        function findConnectedBlocks(row, col, color, visited) {
            if (
                row < 0 || row >= rows || col < 0 || col >= cols ||
                visited.some(([r, c]) => r === row && c === col) ||
                board[row][col] !== color
            ) return visited;

            visited.push([row, col]);

            findConnectedBlocks(row + 1, col, color, visited);
            findConnectedBlocks(row - 1, col, color, visited);
            findConnectedBlocks(row, col + 1, color, visited);
            findConnectedBlocks(row, col - 1, color, visited);

            return visited;
        }

        function dropBlocks() {
            for (let col = 0; col < cols; col++) {
                let emptySpaces = 0;
                for (let row = rows - 1; row >= 0; row--) {
                    if (board[row][col] === null) {
                        emptySpaces++;
                    } else if (emptySpaces > 0) {
                        board[row + emptySpaces][col] = board[row][col];
                        board[row][col] = null;
                    }
                }
            }
            renderBoard();
        }

        function checkWinCondition() {
            let hasMoves = false;

            for (let i = 0; i < rows; i++) {
                for (let j = 0; j < cols; j++) {
                    if (board[i][j]) {
                        const connected = findConnectedBlocks(i, j, board[i][j], []);
                        if (connected.length > 1) {
                            hasMoves = true;
                            break;
                        }
                    }
                }
                if (hasMoves) break;
            }

            if (!hasMoves) {
                winMessage.style.display = "block";
                setTimeout(nextLevel, 2000);
            }
        }

        function nextLevel() {
            winMessage.style.display = "none";
            level++;
            maxColors = Math.min(level + 2, allColors.length);
            createBoard();
        }

        function restartGame() {
            score = 0;
            level = 1;
            maxColors = 3;
            createBoard();
        }

        createBoard();
    </script>
</body>
</html>
